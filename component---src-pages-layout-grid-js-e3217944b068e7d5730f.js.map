{"version":3,"sources":["webpack:///./src/pages/layout/grid.js"],"names":["withLayout","data","h","id"],"mappings":"8FAAA,wDAIeA,uBAAW,YAA+B,EAARC,KAC/C,OACE,oCACE,kBAAC,IAAD,CAAeC,EAAE,IAAIC,GAAG,QAAxB","file":"component---src-pages-layout-grid-js-e3217944b068e7d5730f.js","sourcesContent":["import React from 'react';\nimport LinkedHeading from '../../components/LinkedHeading';\nimport withLayout from \"../../with-layout\"\n\nexport default withLayout(function GridSection({ data }) {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"grid\">Grid system</LinkedHeading>\n    </>\n  );\n});\n\n// import { graphql } from 'gatsby';\n// import React from 'react';\n// import { css } from 'astroturf';\n\n// export default withLayout(function GridSection({ data }) {\n//   return (\n//     <>\n//       <LinkedHeading h=\"1\" id=\"grid\">\n//         Grid system\n//       </LinkedHeading>\n//       <p>\n//         Bootstrap’s grid system uses a series of containers, rows, and columns\n//         to layout and align content. It’s built with{' '}\n//         <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\">\n//           flexbox\n//         </a>{' '}\n//         and is fully responsive. Below is an example and an in-depth look at how\n//         the grid comes together.{' '}\n//       </p>\n//       <p>\n//         <strong>New to or unfamiliar with flexbox?</strong>{' '}\n//         <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background\">\n//           Read this CSS Tricks flexbox guide\n//         </a>{' '}\n//         for background, terminology, guidelines, and code snippets.\n//       </p>\n//       <LinkedHeading h=\"2\" id=\"container\">\n//         Container\n//       </LinkedHeading>\n//       <p>\n//         Containers provide a means to center and horizontally pad your site’s\n//         contents. Use <code>Container</code> for a responsive pixel width.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridContainer}\n//         exampleClassName={styles.example}\n//       />\n//       <LinkedHeading h=\"3\" id=\"container-fluid\">\n//         Fluid Container\n//       </LinkedHeading>\n//       <p>\n//         You can use <code>{'<Container fluid />'}</code> for width: 100% across\n//         all viewport and device sizes.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridContainerFluid}\n//         exampleClassName={styles.example}\n//       />\n//       <p>\n//         You can set breakpoints for the <code>fluid</code> prop. Setting it to a\n//         breakpoint (<code>sm, md, lg, xl</code>) will set the{' '}\n//         <code>Container</code> as fluid until the specified breakpoint.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridContainerFluidBreakpoint}\n//         exampleClassName={styles.example}\n//       />\n\n//       <LinkedHeading h=\"2\" id=\"auto-layout\">\n//         Auto-layout columns\n//       </LinkedHeading>\n//       <p>\n//         When no column widths are specified the <code>Col</code> component will\n//         render equal width columns\n//       </p>\n//       <ReactPlayground\n//         codeText={GridAutoLayout}\n//         exampleClassName={styles.example}\n//       />\n\n//       <LinkedHeading h=\"3\" id=\"auto-layout-col-sizing\">\n//         Setting one column width\n//       </LinkedHeading>\n\n//       <p>\n//         Auto-layout for flexbox grid columns also means you can set the width of\n//         one column and have the sibling columns automatically resize around it.\n//         You may use predefined grid classes (as shown below), grid mixins, or\n//         inline widths. Note that the other columns will resize no matter the\n//         width of the center column.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridAutoLayoutSizing}\n//         exampleClassName={styles.example}\n//       />\n\n//       <LinkedHeading h=\"3\" id=\"auto-layout-variable-sizes\">\n//         Variable width content\n//       </LinkedHeading>\n//       <p>\n//         Set the column value (for any breakpoint size) to <code>\"auto\"</code> to\n//         size columns based on the natural width of their content.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridAutoLayoutVariable}\n//         exampleClassName={styles.example}\n//       />\n//       <LinkedHeading h=\"2\" id=\"responsive-grids\">\n//         Responsive grids\n//       </LinkedHeading>\n//       <p>\n//         The <code>Col</code> lets you specify column widths across 5 breakpoint\n//         sizes (xs, sm, md, large, and xl). For every breakpoint, you can specify\n//         the amount of columns to span, or set the prop to{' '}\n//         <code>{'<Col lg={true} />'}</code> for auto layout widths.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridResponsiveAuto}\n//         exampleClassName={styles.example}\n//       />\n//       <p>\n//         You can also mix and match breakpoints to create different grids\n//         depending on the screen size.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridResponsive}\n//         exampleClassName={styles.example}\n//       />\n//       <p>\n//         The <code>Col</code> breakpoint props also have a more complicated{' '}\n//         <code>object</code> prop form:{' '}\n//         <code>{`{span: number, order: number, offset: number}`}</code> for\n//         specifying offsets and ordering affects.\n//       </p>\n\n//       <p>\n//         You can use the `order` property to control the{' '}\n//         <strong>visual order</strong> of your content.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridOrdering}\n//         exampleClassName={styles.example}\n//       />\n//       <p>\n//         For offsetting grid columns you can set an `offset` value, or, for more\n//         general layout, use the margin class utilities.\n//       </p>\n//       <ReactPlayground\n//         codeText={GridOffsetting}\n//         exampleClassName={styles.example}\n//       />\n//       <LinkedHeading h=\"2\" id=\"grid-props\">\n//         API\n//       </LinkedHeading>\n\n//       <ComponentApi metadata={data.Container} />\n//       <ComponentApi metadata={data.Row} />\n//       <ComponentApi metadata={data.Col} />\n//     </>\n//   );\n// });\n\n// export const query = graphql`\n//   query GridQuery {\n//     Container: componentMetadata(displayName: { eq: \"Container\" }) {\n//       ...ComponentApi_metadata\n//     }\n//     Row: componentMetadata(displayName: { eq: \"Row\" }) {\n//       ...ComponentApi_metadata\n//     }\n//     Col: componentMetadata(displayName: { eq: \"Col\" }) {\n//       ...ComponentApi_metadata\n//     }\n//   }\n// `;"],"sourceRoot":""}