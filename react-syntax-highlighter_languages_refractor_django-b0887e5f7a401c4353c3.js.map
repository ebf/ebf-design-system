{"version":3,"sources":["webpack:///./node_modules/refractor/lang/django.js"],"names":["refractorMarkupTemplating","django","Prism","register","languages","comment","tag","pattern","lookbehind","alias","delimiter","string","greedy","filter","test","keyword","operator","number","variable","punctuation","markupTemplating","hooks","add","env","buildPlaceholders","tokenizePlaceholders","jinja2","module","exports","displayName","aliases"],"mappings":"4FAEA,IAAIA,EAA4B,EAAQ,QAMxC,SAASC,EAAOC,GACdA,EAAMC,SAASH,GAIf,SAAWE,GACTA,EAAME,UAAUH,OAAS,CACvBI,QAAS,iBACTC,IAAK,CACHC,QAAS,mBACTC,YAAY,EACZC,MAAO,WAETC,UAAW,CACTH,QAAS,0BACTE,MAAO,eAETE,OAAQ,CACNJ,QAAS,kCACTK,QAAQ,GAEVC,OAAQ,CACNN,QAAS,UACTC,YAAY,EACZC,MAAO,YAETK,KAAM,CACJP,QAAS,mCACTC,YAAY,EACZC,MAAO,YAET,SAAY,wBACZM,QAAS,gFACTC,SAAU,sDACVC,OAAQ,oBACR,QAAW,2BACXC,SAAU,WACVC,YAAa,iBAEf,IAAIZ,EAAU,0CACVa,EAAmBlB,EAAME,UAAU,qBACvCF,EAAMmB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3CH,EAAiBI,kBAAkBD,EAAK,SAAUhB,MAEpDL,EAAMmB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CH,EAAiBK,qBAAqBF,EAAK,aAG7CrB,EAAME,UAAUsB,OAASxB,EAAME,UAAUH,OACzCC,EAAMmB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3CH,EAAiBI,kBAAkBD,EAAK,SAAUhB,MAEpDL,EAAMmB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CH,EAAiBK,qBAAqBF,EAAK,aAhD/C,CAkDGrB,GA3DLyB,EAAOC,QAAU3B,EACjBA,EAAO4B,YAAc,SACrB5B,EAAO6B,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_django-b0887e5f7a401c4353c3.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = django;\ndjango.displayName = 'django';\ndjango.aliases = ['jinja2'];\n\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating) // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;\n\n  (function (Prism) {\n    Prism.languages.django = {\n      comment: /^{#[\\s\\S]*?#}$/,\n      tag: {\n        pattern: /(^{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      \"function\": /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      \"boolean\": /[Tt]rue|[Ff]alse|[Nn]one/,\n      variable: /\\b\\w+?\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    };\n    var pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g;\n    var markupTemplating = Prism.languages['markup-templating'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'django');\n    }); // Add an Jinja2 alias\n\n    Prism.languages.jinja2 = Prism.languages.django;\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2');\n    });\n  })(Prism);\n}"],"sourceRoot":""}