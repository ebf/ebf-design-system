{"version":3,"sources":["webpack:///./node_modules/refractor/lang/parser.js"],"names":["parser","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","escape","alias","insertBefore","expression","greedy","string","number","operator","module","exports","displayName","aliases"],"mappings":"6FAMA,SAASA,EAAOC,IAGd,SAAWA,GACT,IAAID,EAASC,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,SAAU,CACrEC,QAAS,CACPC,QAAS,+GACTC,YAAY,GAEdC,SAAU,CACRF,QAAS,4DACTC,YAAY,EACZE,OAAQ,CACNC,YAAa,UAGjB,SAAY,CACVJ,QAAS,iDACTC,YAAY,EACZE,OAAQ,CACNJ,QAAS,CACPC,QAAS,oBACTC,YAAY,GAEdG,YAAa,UAGjBC,OAAQ,CACNL,QAAS,qCACTM,MAAO,WAETF,YAAa,gBAEfT,EAASC,EAAMC,UAAUU,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBP,QAAS,UACTC,YAAY,EACZK,MAAO,WAETE,WAAY,CAEVR,QAAS,uDACTS,QAAQ,EACRR,YAAY,EACZE,OAAQ,CACNO,OAAQ,CACNV,QAAS,2CACTC,YAAY,GAEdF,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjB,SAAYP,EAAiB,SAC7B,QAAW,qBACXgB,OAAQ,8CACRN,OAAQV,EAAOU,OACfO,SAAU,iGACVR,YAAaT,EAAOS,gBAI1BT,EAASC,EAAMC,UAAUU,aAAa,SAAU,cAAe,CAC7DC,WAAYb,EAAOa,WACnBT,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjB,SAAYP,EAAiB,SAC7BU,OAAQV,EAAOU,OACf,qBAAsB,CACpBL,QAASL,EAAOS,YAChBE,MAAO,gBAERX,EAAY,IAAEQ,OAAO,eAnE1B,CAoEGP,GA3ELiB,EAAOC,QAAUnB,EACjBA,EAAOoB,YAAc,SACrBpB,EAAOqB,QAAU","file":"react-syntax-highlighter_languages_refractor_parser-8d33ce855ce6c613de77.js","sourcesContent":["'use strict';\n\nmodule.exports = parser;\nparser.displayName = 'parser';\nparser.aliases = [];\n\nfunction parser(Prism) {\n  ;\n\n  (function (Prism) {\n    var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      \"function\": {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    });\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          \"function\": parser[\"function\"],\n          \"boolean\": /\\b(?:true|false)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    });\n    parser = Prism.languages.insertBefore('inside', 'punctuation', {\n      expression: parser.expression,\n      keyword: parser.keyword,\n      variable: parser.variable,\n      \"function\": parser[\"function\"],\n      escape: parser.escape,\n      'parser-punctuation': {\n        pattern: parser.punctuation,\n        alias: 'punctuation'\n      }\n    }, parser['tag'].inside['attr-value']);\n  })(Prism);\n}"],"sourceRoot":""}