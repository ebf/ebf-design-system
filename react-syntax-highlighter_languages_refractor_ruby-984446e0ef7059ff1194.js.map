{"version":3,"sources":["webpack:///./node_modules/refractor/lang/ruby.js"],"names":["ruby","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb","module","exports","displayName","aliases"],"mappings":"6FAMA,SAASA,EAAKC,IASZ,SAAWA,GACTA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,QAAS,CACrDC,QAAS,CAAC,MAAO,CACfC,QAAS,0BACTC,QAAQ,IAEVC,QAAS,yRAEX,IAAIC,EAAgB,CAClBH,QAAS,aACTI,OAAQ,CACNC,UAAW,CACTL,QAAS,WACTM,MAAO,OAETC,KAAMX,EAAMC,UAAUF,cAGnBC,EAAMC,UAAUF,KAAe,SACtCC,EAAMC,UAAUW,aAAa,OAAQ,UAAW,CAC9CC,MAAO,CAAC,CACNT,QAAS,+DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,wCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CAEDH,QAAS,yDACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,0CACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,sCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,6EACTU,YAAY,EACZT,QAAQ,IAEVU,SAAU,+BACVC,OAAQ,CACNZ,QAAS,mCACTU,YAAY,GAEd,oBAAqB,CACnBV,QAAS,mBACTU,YAAY,EACZN,OAAQ,CACN,SAAY,OACZG,KAAMX,EAAMC,UAAUF,SAI5BC,EAAMC,UAAUW,aAAa,OAAQ,SAAU,CAC7CK,QAAS,+OACTC,SAAU,0BAEZlB,EAAMC,UAAUF,KAAKoB,OAAS,CAAC,CAC7Bf,QAAS,+DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,wCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CAEDH,QAAS,yDACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,0CACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,sCACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDH,QAAS,2DACTC,QAAQ,EACRG,OAAQ,CACND,cAAeA,KAGnBP,EAAMC,UAAUmB,GAAKpB,EAAMC,UAAUF,KAhHvC,CAiHGC,GA9HLqB,EAAOC,QAAUvB,EACjBA,EAAKwB,YAAc,OACnBxB,EAAKyB,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_ruby-984446e0ef7059ff1194.js","sourcesContent":["'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby[\"function\"];\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          \"function\": /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}"],"sourceRoot":""}